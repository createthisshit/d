import logging
import sys
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from urllib.parse import urlencode
import traceback
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
YOOMONEY_WALLET = "your_wallet_number"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
YOOMONEY_SECRET = "your_notification_secret"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

import logging
import sys
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import ClientSession
from urllib.parse import urlencode
import traceback
import asyncio
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (@NewMiraPayBot)
YOOMONEY_WALLET = "4100118178122985"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
KOYEB_URL = "favourite-brinna-createthisshit-eca5920c.koyeb.app/save_payment"  # URL Koyeb

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
try:
    bot = Bot(token=TOKEN)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="pay"))
        welcome_text = (
            "–¢–∞—Ä–∏—Ñ: —Ñ—É–ª–ª\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500.00 üá∑üá∫RUB\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –º–µ—Å—è—Ü\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n"
            "‚Ä¢ –ú–æ–π –∫–∞–π—Ñ (–∫–∞–Ω–∞–ª)"
        )
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
@dp.message_handler(commands=['pay'])
@dp.callback_query_handler(text="pay")
async def pay_command(message_or_callback: types.Message | types.CallbackQuery):
    try:
        if isinstance(message_or_callback, types.Message):
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.chat.id
        else:
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.message.chat.id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pay –æ—Ç user_id={user_id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
        payment_label = str(uuid.uuid4())
        payment_params = {
            "quickpay-form": "shop",
            "paymentType": "AC",
            "targets": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}",
            "sum": 500.00,
            "label": payment_label,
            "receiver": YOOMONEY_WALLET,
            "successURL": f"https://t.me/{(await bot.get_me()).username}"
        }
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?{urlencode(payment_params)}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ label:user_id –ª–æ–∫–∞–ª—å–Ω–æ
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (payment_label, user_id, "pending"))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ label:user_id –Ω–∞ Koyeb
        async with ClientSession() as session:
            try:
                async with session.post(KOYEB_URL, json={"label": payment_label, "user_id": user_id}) as response:
                    if response.status == 200:
                        logger.info(f"label={payment_label} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Koyeb –¥–ª—è user_id={user_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Koyeb: {await response.text()}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Koyeb: {e}")
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
        await bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è user_id={user_id}, label={payment_label}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def start_polling_with_retries():
    logger.info("–ó–∞–ø—É—Å–∫ polling —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏")
    attempt = 1
    while True:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            await dp.skip_updates()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ó–∞–ø—É—Å–∫ polling")
            await dp.start_polling(timeout=20)
            logger.info("Polling —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}\n{traceback.format_exc()}")
            logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
            attempt += 1
            if attempt > 5:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞ polling")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å polling –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")

async def on_startup(_):
    logger.info("–í—ã–∑–æ–≤ on_startup")
    return True

if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    try:
        asyncio.run(start_polling_with_retries())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)
